{
    "homepage": "https://github.com/Wiederhoeft/juejin-helper",
    "comments": {
        "pin": [
            "666",
            "牛",
            "Yes",
            "🈶️",
            "棒棒哒",
            "6666",
            "有多大",
            "上班ing",
            "[嘿哈]刚醒，正在被窝里追剧",
            "[流泪][流泪][流泪][流泪]",
            "加班不存在的 我只是来公司白嫖加班餐和调休[白眼的狗]",
            "[流泪]",
            "懒得喷",
            "[衰]",
            "就是因为加班少要被优化了[流泪][流泪]",
            "牛马[泪奔]",
            "[流泪][流泪]",
            "6666666",
            "你我皆是高级牛马",
            "[微笑]",
            "[憨笑]",
            "彩色的[吐舌]",
            "可以找找https://ai-bot.cn/",
            "星火大模型",
            "666666666"
        ],
        "article": [
            "感谢，学习了，受益颇多",
            "学费了",
            "学到了[不失礼貌的微笑]",
            "[赞]",
            "[奋斗][奋斗][奋斗]",
            "总结的不错，厉害了",
            "非常好，空了仔细看🧐",
            "支持原创，文章内容清新，知识点很详细",
            "讲的很不错[赞]",
            "大佬,666",
            "确实厉害",
            "不错，非常有意思",
            "优秀",
            "技术只是手段，挣钱才是目的[呲牙]",
            "你是一粒种子 他们想把你埋了 ！",
            "靓仔！",
            "[思考]赞",
            "[灵光一现]",
            "简明扼要[灵光一现]",
            "m",
            "膜拜大佬",
            "赞一个",
            "说实话 没打动",
            "学废了",
            "牛",
            "很棒，受教了！",
            "有才",
            "好久没见这种好文章了！[赞][赞][赞]",
            "这些高深的细节的东西 我是真不会",
            "哇，大佬",
            "高质量文章，学习了",
            "精品，请问可以转载吗",
            "精品",
            "好文，收藏",
            "可以的",
            "[给力]",
            "离谱",
            "太棒了，我去试试",
            "已使用",
            "强强",
            "[送心]",
            "学习学习",
            "学废了学废了[给力]",
            "干货满满",
            "强啊哥哥",
            "来了来了[灵光一现]",
            "来了来了",
            "满满的含金量",
            "强[赞]",
            "学废了，很湿用",
            "文章的图文排布看着很舒服",
            "看完很受启发",
            "牛的 牛的",
            "厉害[赞]",
            "说实话这考察的既有广度又有深度，不止校招，连社招都吊打一大部分人。",
            "实话实说，干了六年了，这里面一个不会。",
            "拿来吧你",
            "经典面试造火箭，工作七年了我也不会这些啊",
            "我还以为校招回很简单,原来这么难.....",
            "太难了，电竞是不是核中核",
            "厉害啊",
            "[发呆]小编最后春招上岸百度了？",
            "6",
            "是不是写了精通vue源码，看碟下菜的",
            "这是校招？",
            "恐怖如斯",
            "校招就问monorepo吗？[石化]",
            "我嘞个豆，我工作两年了很多都还没听过[发呆]",
            "就考一些这？",
            "好难啊，我感觉我工作两年就是个水货",
            "问这么深 太难了",
            "666",
            "可以可以，难度不大。在校多学习了解下都能回答个七七八八",
            "楼主面的哪个部门呐",
            "前端佬不语，一味点击收藏",
            "Mark",
            "这不得加上 小破站[呲牙]",
            "推荐vscode操作手册、控制台操作手册",
            "big胆！居然放最后一位[看]",
            "第一个网站不能访问呢 开了魔法上网了[发呆]",
            "补充一个，前端面试题题库网站，找工作的大佬可以看看[绝望的凝视]https://fe.ecool.fun/",
            "最后一个有严重拍马嫌疑[白眼的狗]",
            "caniuse.com/ 这是什么?",
            "还有一个，检测浏览器可以使用：https://browseris.com/\n可以检测出360浏览器！！",
            "看完之后发现原来我都不配被叫做前端佬[流泪]",
            "第一个是全球PC端浏览器占比份额......有没有全国PC端浏览器占比份额啊?",
            "其他的都可以，最后一个不太行[不失礼貌的微笑]",
            "活着",
            "活着就对了",
            "有道理，先安心干着把",
            "我只是想在山清水秀的地方搞个农家小院 养几只小动物 种几种作物自给自足 但就连这么简单的愿望都很难实现 要考虑到很多现实因素",
            "1",
            "111",
            "👏",
            "只做自己喜欢的事，才能找到真正的快乐和满足感。这段话盯着看了很久，回想脑子里真正想做的事情，我想去旅游、想学摄影、想不顾一切到处去走，可是现实往往事与愿违，现在的感觉是被时代的浪潮推着走，我不游的话就会被淹没，有时候想做某件时间真的要下很大的决心，我有时候也希望自己别想太多，活在当下，希望后来越来越好吧。话已至此，很抱歉向你们分享我的焦虑，一起加油向前游吧！总会到岸的！",
            "[发呆]",
            "可惜对window的支持不是很好",
            "exo这玩意到现在也不能用",
            "很厉害的样子",
            "拉低行业门槛，降低平均工资。其实这事一直在发生，从低级语言到高级语言的事一直在发生。",
            "那只是这个版本的AI编程而已[奸笑]",
            "AI不能和产品撕逼",
            "好用，爱用，就是暂时还没有用AI挣到一毛钱[捂脸]",
            "「程序员日常时间分配为：\n\n编码（45%）\n沟通协调（30%）\n系统运维（25%）」\n这个说法很中肯\n沟通协调虽然占比30%，但是最重要的",
            "我用了几天cursor，总结如下：\n1、cursor可能会写错代码，你自己得检查。\n2、程序结构靠你自己掌控。\n3、如果是新类库，它不见得会写，即使给他资料。\n尤其是3，我试用了一下springAI，具体细节还好，cursor自动生成的结构都是错的。\n比如向量库vectorStored的注入，配置文件里把向量库的 host，port写好就直接注入就行了。cursor就不断的给写config，写config就算了，关键用的api的版本不对 ，不过我强调了1.0.0M6版本之后，它改变了一些，但是还是试图写config。。。。。",
            "哪里坚不可摧了 , 难道忘了35优化吗",
            "不会被取代，确实提高了工作效率，干的活越来越多了。[发怒]",
            "上手成本越低的行业越容易被取代，AI生成的结果还是需要人为来“审核”后再判断是否能够使用，本质上还是需要你掌握对应的技能。程序员手动编码的效率将被提高，但是整体的逻辑调整，bug查找，代码的复杂程度会随着业务量级的发展产生非常巨大的变化，最后还是需要有掌握技能的开发来把关。但是换个思路就是，节约了程序员的时间后，程序员就可以去干别的工作了，比如运营，文案的编写等，产品的设计等。以后一个人就是一家公司（产品设计，美术，开发，运营），但是这个人大概率要掌握编程（非程序员也可以编程，但是就是得会）。现阶段还是大大的提效，取代做不到。",
            "开发会不会被取代我不知道，我只知道真有那么一天的话，那其他行业基本已经全军覆没了，毕竟最难取代的就是创造它的行业",
            "换一个角度想想, 假设AI发展到了能一定程度上且不说完全替代程序员的地步, 那社会上大部分职业都将被取代",
            "或许有一点 AI 永远也无法替代，那就是他们不可能理解神奇的产品经理到底想要一个什么功能",
            "工作的内容不会减少，但工作的人会变少。AI带来效率的提升会压缩程序员的工作机会。趋势上AI会慢慢替代人，熟练使用AI提示词会成为以后招聘的一项技能",
            "人自然是无法完全被取代，但是你列的部分问题，在五年内都会被AI取代。说直白点，你没说到点上。",
            "\"系统维护需要持续的知识投资，AI无法建立长期技术上下文\"",
            "前端回暖了没",
            "科技向善怎么维护呢",
            "哈哈哈哈哈，刚涨完薪就被裁，这样N+1 也能多点了，这么想会不会好受点",
            "学习了",
            "最后一天就最后一天，还last day！！！！",
            "如果是 30+ 尽快尝试找工作比较好，过来人了，半年多才找到，降薪入职，坐标南京",
            "裁员能给足补偿已经超过绝大部分公司了",
            "钱捞够了 可以早点退休钓鱼了",
            "稳中向好~",
            "没考虑去日本吗",
            "能介绍一下赔偿方案吗",
            "ai现在发现越来越强了，人的用量会减少了。",
            "给你分享一款免费的AI编程助手MarsCode，全新支持DeepSeek R1/V3、豆包大模型1.5自由切换，免部署、更准确、更强大！助你提高编程效率，可以点击体验一下哦:https://www.marscode.cn/events/s/6Z0YbcIbPOA/",
            "bur，搞量化的也这么艰难么。我感觉这不是钱生钱的行业么[衰]",
            "情绪量化交易系统是？可以分享一下吗",
            "前端小组长...",
            "作者加油，我也是慢慢转型全栈，开发在线客服系统服务海外APP的。https://kf.shengxunwei.com/",
            "interesting",
            "现在上班了吗",
            "这公司不错了，还能涨薪。",
            "你这种被裁完全是喜事，既得赔偿又可以换工作，技术扎实不愁下家。",
            "前面说还涨薪 后面你又说被裁 什么情况呀",
            "弱质玩意",
            "靠 举报",
            "说得好，但是我不喜欢回调地狱[撇嘴]",
            "新一代在哪…",
            "[捂脸]",
            "[疑问]",
            "什么玩意[疑问]",
            "请到评论区的看客右上角点击举报，写这种标题骗点击，浪费大家时间真恶心",
            "1. 移除不必要的await可提升约25-30%的性能\n在V8引擎中，单个await调用耗时约0.1ms（微任务调度+上下文保存），仅当每秒调用超10万次时才会显著影响性能。\n\n2.Promise池化比await循环提升60-70%\n池化本质是通过控制并发数减少内存压力，而非Promise本身更快。池化本质是通过控制并发数减少内存压力，而非Promise本身更快。\n\n3.async/await上下文切换开销大\n现代引擎对async/await的优化已极致，连续await会被合并为单个微任务，上下文切换成本趋近于零\n。\n\n4.Promise.all比顺序await快65-70%\n这差异源自并行vs串行的执行方式，与Promise/await本身无关。即使用await\n\n\n[尬笑][尬笑][尬笑][尬笑][尬笑]下次用AI写一下试试？",
            "有点难吃",
            "可读性的考虑呢？原理的分析是为什么",
            "标题党",
            "这标题，你是懂起标题的",
            "“在多个独立异步操作场景中，使用Promise.all比顺序await提升约65-70%”，Promise.all和顺序await都不是一个逻辑，这也能比？",
            "就现在电脑和手机的性能你还在担心什么async/await的开销，大厂都巴不得把你的手机性能拉满，各种上特效",
            "神特么新一代写法，说这么多不就是一句弃用async/await换性能。\nasync/await可读价值也很重要，不让它入标准干嘛呢",
            "看了标题, 我以为有什么新出的API呢",
            "有种请大家吃席结果压轴菜是大米饭的感觉",
            "你这个标题，我期待有点高[看]",
            "Promise.all 不是有一个拒绝了，就都拒绝么？这样体验是不是不好"
        ]
    }
}